@page "/articles"
@using Microsoft.EntityFrameworkCore
@using NimbleLoop.Domain.Entities
@using NimbleLoopWebApp.Data
@attribute [StreamRendering]
@inject NimbleLoopDbContext dbContext

<!--Hero section:start-->
<div class="my-5 container">
  <div class="text-center">
    <h1>Explore Our Insights</h1>
    <p>Stay updated with the latest articles and insights from NimbleLoop.</p>
  </div>
  <div class="d-flex justify-content-center mt-4">
    <div class="input-group w-50">
      <input type="text" class="form-control" placeholder="Search articles..." @bind-value="searchTerm" @bind-value:event="oninput" @bind-value:after="FilterArticles" />
      <select class="form-select" @bind="selectedCategory" @bind:after="FilterArticles">
        <option value="">All Categories</option>
        @foreach (var category in categories)
        {
          <option value="@category">@category</option>
        }
      </select>
    </div>
  </div>
  <AddArticleButton />
</div>
<!--Hero section:end-->
<!--Featured section:start-->
<div class="my-5 container">
  <h2 class="mb-4 text-center">Featured Articles</h2>
  <div class="row">
    @foreach (var article in featuredArticles)
    {
      <ArticleTile ImageUrl="@article.ImageUrl" Key="@article.Key" Summary="@article.MetaDescription" Title="@GetArticleTitle(article)" />
    }
  </div>
</div>
<!--Featured section:end-->
<!--Articles list section:start-->
<div class="my-5 container">
  <h2 class="mb-4 text-center">All Articles</h2>
  <div class="row">
    @foreach (var article in filteredArticles)
    {
      <ArticleTile ImageUrl="@article.ImageUrl" Key="@article.Key" Summary="@article.MetaDescription" Title="@GetArticleTitle(article)" />
    }
  </div>
</div>
<!--Articles list section:end-->
@code {
  private List<Article> articles = new();
  private List<Article> filteredArticles = new();
  private List<Article> featuredArticles = new();
  private List<string> categories = new();
  private string searchTerm = string.Empty;
  private string selectedCategory = string.Empty;

  protected async override Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    articles = await dbContext.Articles.OrderByDescending(x => x.CreatedAt).ToListAsync();
    filteredArticles = articles;
    featuredArticles = articles.Where(a => a.IsFeatured).ToList();
    categories = articles.SelectMany(a => a.Tags).Distinct().ToList();
  }

  private void FilterArticles()
  {
    filteredArticles = articles
        .Where(a => (string.IsNullOrEmpty(searchTerm) || a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                    (string.IsNullOrEmpty(selectedCategory) || a.Tags.Contains(selectedCategory)))
        .ToList();
  }

  private static string GetArticleTitle(Article article) => string.IsNullOrEmpty(article.MetaTitle) ? article.Title : article.Title;
}