@page "/articles"
@using Microsoft.EntityFrameworkCore
@using NimbleLoop.Domain.Entities
@using NimbleLoopWebApp.Data
@using NimbleLoop.Domain.Queries
@attribute [StreamRendering]
@inject NimbleLoopDbContext dbContext

<!--Hero section:start-->
<div class="my-5 container">
  <div class="text-center">
    <h1>Explore Our Insights</h1>
    <p>Stay updated with the latest articles and insights from NimbleLoop.</p>
  </div>
  <ArticleSearchbox SearchTerm="@SearchTerm" SelectedCategory="@SelectedCategory" />
  <AddArticleButton />
</div>
<!--Hero section:end-->
<!--Featured section:start-->
<div class="my-5 container">
  <h2 class="mb-4 text-center">Featured Articles</h2>
  <div class="row">
    @foreach (var article in featuredArticles)
    {
      <ArticleTile ImageUrl="@article.ImageUrl" Key="@article.Key" Summary="@article.MetaDescription" Title="@article.GetArticleTitle()" ImageAlt="@article.GetArticleImageAlt()" />
    }
  </div>
</div>
<!--Featured section:end-->
<!--Articles list section:start-->
<div class="my-5 container">
  <h2 class="mb-4 text-center">All Articles</h2>
  <div class="row">
    @foreach (var article in filteredArticles)
    {
      <ArticleTile ImageUrl="@article.ImageUrl" Key="@article.Key" Summary="@article.MetaDescription" Title="@article.GetArticleTitle()" ImageAlt="@article.GetArticleImageAlt()" />
    }
  </div>
</div>
<!--Articles list section:end-->
@code {
  [SupplyParameterFromQuery(Name = "query")]
  public string? SearchTerm { get; set; }
  [SupplyParameterFromQuery(Name = "category")]
  public string? SelectedCategory { get; set; }

  private IQueryable<Article> articles = null!;
  private List<Article> filteredArticles = new();
  private List<Article> featuredArticles = new();

  protected async override Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    featuredArticles = await dbContext.Articles.GetFeaturedArticles(4).ToListAsync();
    articles = dbContext.Articles.GetArticles();
    if (!string.IsNullOrEmpty(SelectedCategory))
    {
      articles = articles.Where(x => x.Tags.Contains(SelectedCategory));
    }
    if (!string.IsNullOrEmpty(SearchTerm))
    {
      articles = articles.Where(x => x.Title.Contains(SearchTerm.ToTitleCase()));
    }
    filteredArticles = await articles.ToListAsync();
  }
}