@page "/articles"
@using Microsoft.EntityFrameworkCore
@using NimbleLoop.Domain.Entities
@using NimbleLoopWebApp.Data
@using NimbleLoop.Domain.Queries
@attribute [StreamRendering]
@inject NimbleLoopDbContext dbContext

<!--Hero section:start-->
<div class="my-5 container">
  <div class="text-center">
    <h1>Explore Our Insights</h1>
    <p>Stay updated with the latest articles and insights from NimbleLoop.</p>
  </div>
  <ArticleSearchbox SearchTerm="@SearchTerm" SelectedCategory="@SelectedCategory" />
  <AddArticleButton />
</div>
<!--Hero section:end-->
@if (string.IsNullOrEmpty(SearchTerm) && string.IsNullOrEmpty(SelectedCategory))
{
  <!--Featured section:start-->
  <div class="my-5 container">
    <h2 class="mb-4 text-center">Featured Articles</h2>
    <div class="row">
      @foreach (var article in featuredArticles)
      {
        <ArticleTile ImageUrl="@article.ImageUrl" Key="@article.Key" Summary="@article.MetaDescription" Title="@article.GetArticleTitle()" ImageAlt="@article.GetArticleImageAlt()" />
      }
    </div>
  </div>
  <!--Featured section:end-->
}
<!--Articles list section:start-->
<div class="my-5 container">
  <h2 class="mb-4 text-center">All Articles</h2>
  <div class="row">
    @foreach (var article in filteredArticles)
    {
      <ArticleTile ImageUrl="@article.ImageUrl" Key="@article.Key" Summary="@article.MetaDescription" Title="@article.GetArticleTitle()" ImageAlt="@article.GetArticleImageAlt()" />
    }
  </div>
</div>
<!--Articles list section:end-->
@if (totalPages > 0)
{
  <!--Articles Pagination:start-->
  <nav aria-label="Articles Navigation">
    <ul class="pagination justify-content-center">
      <li class="page-item @(currentPage==1?"disabled":string.Empty)">
        <a class="page-link" href="@GetPaginationUri(currentPage-1)" aria-label="Previous">
          <span aria-hidden="true">&laquo;</span>
          <span class="sr-only">Previous</span>
        </a>
      </li>
      @for (int i = 1; i <= totalPages; i++)
      {
        <li class="page-item @(currentPage==i?"active":string.Empty)"><a class="page-link" href="@GetPaginationUri(i)">@i</a></li>
      }
      <li class="page-item @(currentPage==totalPages?"disabled":string.Empty)">
        <a class="page-link" href="@GetPaginationUri(currentPage+1)" aria-label="Next">
          <span aria-hidden="true">&raquo;</span>
          <span class="sr-only">Next</span>
        </a>
      </li>
    </ul>
  </nav>
  <!--Articles Pagination:end-->
}
@code {
  [SupplyParameterFromQuery(Name = "query")]
  public string? SearchTerm { get; set; }
  [SupplyParameterFromQuery(Name = "category")]
  public string? SelectedCategory { get; set; }
  [SupplyParameterFromQuery(Name = "page")]
  public int? Page { get; set; }

  private IQueryable<Article> articles = null!;
  private List<Article> filteredArticles = new();
  private List<Article> featuredArticles = new();
  private int pageSize = 1;
  private int totalPages = 0;
  private int currentPage;

  protected async override Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    featuredArticles = await dbContext.Articles.GetFeaturedArticles(4).ToListAsync();
    articles = dbContext.Articles.GetArticles();
    if (!string.IsNullOrEmpty(SelectedCategory))
      articles = articles.Where(x => x.Tags.Contains(SelectedCategory));
    if (!string.IsNullOrEmpty(SearchTerm))
      articles = articles.Where(x => x.Title.Contains(SearchTerm.ToTitleCase()));
    var totalArticles = await articles.CountAsync();
    totalPages = (totalArticles + pageSize - 1) / pageSize;
    currentPage = Page ?? 1;
    filteredArticles = await articles.Skip((currentPage - 1) * pageSize).Take(pageSize).ToListAsync();
  }

  private string GetPaginationUri(int page)
  {
    var uriBuilder = new UriBuilder
      {
        Path = "/articles",
        Query = $"page={page}"
      };

    var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
    if (!string.IsNullOrEmpty(SearchTerm))
      query["query"] = SearchTerm;
    if (!string.IsNullOrEmpty(SelectedCategory))
      query["category"] = SelectedCategory;

    uriBuilder.Query = query.ToString();
    return uriBuilder.Uri.PathAndQuery;
  }

}