@page "/articles/{Key}"
@using Microsoft.EntityFrameworkCore
@using MongoDB.Driver
@using NimbleLoop.Domain.Entities
@using Humanizer
@using NimbleLoopWebApp.Data
@using NimbleLoop.Domain.Queries
@attribute [StreamRendering]
@inject NimbleLoopDbContext DbContext

@if (article is not null)
{
  <!--Hero Section:start-->
  <div class="hero-section mb-5 text-center">
    <img src="@article.ImageUrl" alt="@article.ImageAltText" class="hero-image img-fluid mb-3 rounded" />
    <h1 class="display-4">@article.Title</h1>
    <h3 class="text-muted">Posted @article.CreatedAt.Humanize(true) by @article.Editor.Name</h3>
  </div>
  <!--Hero Section:end-->
  <!--Content Section:start-->
  <div class="content-section mb-5">
    @((MarkupString)article.ContentMarkdown)
  </div>
  <!--Content Section:end-->
  <!--Editor Section:start-->
  <div class="editor-section mb-5 p-4 bg-light rounded">
    <h2>About the Editor</h2>
    <div class="d-flex align-items-center">
      <img src="@article.Editor.ImageUrl" alt="@article.Editor.ImageAltText" class="editor-image img-fluid rounded-circle me-3" style="width: 100px; height: 100px;" />
      <div>
        <h3>@article.Editor.Name</h3>
        <p>@article.Editor.Bio</p>
      </div>
    </div>
  </div>
  <!--Editor Section:end-->
  <!--Latest Section:start-->
  @if (relatedArticles.Any())
  {
    <h2>Latest Blogs</h2>
    <div class="row">
      @foreach (var relatedArticle in relatedArticles)
      {
        <ArticleTile Key="@relatedArticle.Key"
                     ImageUrl="@relatedArticle.ImageUrl"
                     ImageAlt="@relatedArticle.ImageAltText"
                     Title="@relatedArticle.Title"
                     Summary="@relatedArticle.MetaDescription" />
      }
    </div>
  }
  <!--Latest Section:end-->
  @*  <!--Comments Section:start-->
  <ArticleCommentsSection ArticleId="@article.Id" />
  <!--Comments Section:end--> *@
}
else
{
  <p>Resource not found</p>
}

@code {
  [Parameter]
  public string Key { get; set; } = null!;

  private Article? article;
  private List<Article> relatedArticles = [];

  protected async override Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    article = await DbContext.Articles.FirstOrDefaultAsync(x => x.Key == Key);
    if (article is not null)
      article.Editor = (await DbContext.Editors.FindAsync(article.EditorId))!;
    relatedArticles = await DbContext.Articles.GetArticles(4).ToListAsync();
  }
}
