@page "/articles/{Key}"
@using Microsoft.EntityFrameworkCore
@using MongoDB.Driver
@using NimbleLoop.Domain.Entities
@using Humanizer
@using NimbleLoopWebApp.Data
@using NimbleLoop.Domain.Queries
@attribute [StreamRendering]
@inject NimbleLoopDbContext DbContext
@inject IHostEnvironment HostEnvironment
@inject NavigationManager NavigationManager

@if (article is not null)
{
  <PageTitle>@article.GetArticleTitle() - @NimbleLoopWebApp.Constants.APP_NAME</PageTitle>
  <HeadContent>
    <meta name="description" content="@article.MetaDescription" />
    <meta name="keywords" content="@article.MetaKeywords" />
    <meta property="og:title" content="@article.GetArticleTitle()" />
    <meta property="og:description" content="@article.MetaDescription" />
    <meta property="og:image" content="@article.ImageUrl" />
    <meta property="og:type" content="article" />
    <meta property="og:url" content="@GetArticleUri(article.Key)">
    <meta property="article:published_time" content="@article.CreatedAt.ToOrdinalWords()" />
    <meta property="article:modified_time" content="@article.LastModified.ToOrdinalWords()" />
    <meta property="article:author" content="@article.Editor.Name" />
    <meta property="article:tag" content="@(string.Join(", ",article.Tags))" />
  </HeadContent>
  <!--Hero Section:start-->
  <div class="hero-section mb-5 text-center">
    <img src="@article.ImageUrl" alt="@article.ImageAltText" class="hero-image img-fluid mb-3 rounded" />
    <h1 class="display-4">@article.Title</h1>
    <h3 class="text-muted">Posted @article.CreatedAt.Humanize(true) by @article.Editor.Name</h3>
    <AddArticleButton ArticleId="@article.Id" />
  </div>
  <!--Hero Section:end-->
  <!--Content Section:start-->
  <div class="content-section mb-5">
    @((MarkupString)article.ContentMarkdown)
  </div>
  <!--Content Section:end-->
  <!--Editor Section:start-->
  <div class="editor-section mb-5 p-4 bg-light rounded">
    <h2>About the Editor</h2>
    <div class="d-flex align-items-center">
      <img src="@article.Editor.ImageUrl" alt="@article.Editor.ImageAltText" class="editor-image img-fluid rounded-circle me-3" style="width: 100px; height: 100px;" />
      <div>
        <h3>@article.Editor.Name</h3>
        <p>@article.Editor.Bio</p>
      </div>
    </div>
  </div>
  <!--Editor Section:end-->
  <!--Latest Section:start-->
  @if (relatedArticles.Any())
  {
    <h2>Latest Blogs</h2>
    <div class="row">
      @foreach (var relatedArticle in relatedArticles)
      {
        <ArticleTile Key="@relatedArticle.Key"
                     ImageUrl="@relatedArticle.ImageUrl"
                     ImageAlt="@relatedArticle.ImageAltText"
                     Title="@relatedArticle.Title"
                     Summary="@relatedArticle.MetaDescription" />
      }
    </div>
  }
  <!--Latest Section:end-->
  @*  <!--Comments Section:start-->
  <ArticleCommentsSection ArticleId="@article.Id" />
  <!--Comments Section:end--> *@

  <script type="application/ld+json">
    {
    @("@context"): "https://schema.org",
    @("@type"): "Article",
    @("@id"): "#Article",
        mainEntityOfPage: {
    @("@type"): "WebPage",
    @("@id"): "#webpage",
              "url": "@GetArticleUri(article.Key)"
            },
        name: "@article.GetArticleTitle()",
        headline: "@article.Title",
        description: "@article.MetaDescription",
        image: "@article.ImageUrl",
        datePublished: "@article.CreatedAt.ToOrdinalWords()",
        dateModified: "@article.LastModified.ToOrdinalWords()",
        author: "@article.Editor.Name",
        publisher: {
    @("@type"): "Organization",
            name: "@NimbleLoopWebApp.Constants.APP_NAME",
            logo: {
    @("@type"): "ImageObject",
              url: "@Assets["images/logo.png"]"
            }
        }
    }
  </script>
}
else
{
  <p>Resource not found</p>
}

@code {
  [Parameter]
  public string Key { get; set; } = null!;

  private Article? article;
  private List<Article> relatedArticles = [];

  protected async override Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    article = await DbContext.Articles.FirstOrDefaultAsync(x => x.Key == Key);
    if (article is not null)
      article.Editor = (await DbContext.Editors.FindAsync(article.EditorId))!;
    relatedArticles = await DbContext.Articles.GetArticles(4).ToListAsync();
  }

  private string GetArticleUri(string key)
  {
    var uri = new Uri(NavigationManager.BaseUri);
    return new Uri(uri, key).ToString();
  }
}
