@using System.Text
@rendermode InteractiveWebAssembly
@inject HttpClient HttpClient
@inject NavigationManager Navigator

@if (categories is not null)
{
  <div class="d-flex justify-content-center mt-4">
    <div class="input-group w-50">
      <input type="text" class="form-control" placeholder="Search articles..." @bind-value="SearchTerm" @bind-value:event="oninput" @bind-value:after="DeferredFilterArticles" />
      <select class="form-select" @bind="SelectedCategory" @bind:after="FilterArticles">
        <option value="">All Categories</option>
        @foreach (var category in categories)
        {
          <option value="@category">@category.ToTitleCase()</option>
        }
      </select>
    </div>
  </div>
}

@code {
  [Parameter]
  public string? SearchTerm { get; set; }
  [Parameter]
  public string? SelectedCategory { get; set; }
  private List<string> categories = null!;
  private CancellationTokenSource? cancellationTokenSource;

  protected async override Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      categories = await HttpClient.GetFromJsonAsync<List<string>>("api/categories") ?? [];
      StateHasChanged();
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  private void FilterArticles()
  {
    var uriBuilder = new UriBuilder
      {
        Path = "/articles"
      };

    var query = System.Web.HttpUtility.ParseQueryString(string.Empty);

    if (!string.IsNullOrWhiteSpace(SearchTerm))
      query["query"] = SearchTerm;
    if (!string.IsNullOrWhiteSpace(SelectedCategory))
      query["category"] = SelectedCategory;

    uriBuilder.Query = query.ToString();
    Navigator.NavigateTo(uriBuilder.Uri.PathAndQuery);
  }

  private void DeferredFilterArticles()
  {
    cancellationTokenSource?.Cancel();
    cancellationTokenSource = new CancellationTokenSource();
    var token = cancellationTokenSource.Token;
    Task.Delay(1500, token).ContinueWith(_ => FilterArticles(), token);
  }

}
