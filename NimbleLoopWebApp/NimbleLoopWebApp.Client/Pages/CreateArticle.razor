@page "/articles/create/{ArticleId?}"
@using Blazored.Modal
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using NimbleLoop.Domain.Entities
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using NimbleLoopWebApp.Client.Components
@using NimbleLoopWebApp.Client.ViewModels
@rendermode InteractiveWebAssembly
@inject IHttpClientFactory HttpClientFactory
@inject IServiceProvider ServiceProvider

<PageTitle>@(IsEditMode ? "Edit" : "Create New") Blog - @Constants.APP_NAME</PageTitle>

@if (isLoaded)
{
  <CascadingBlazoredModal>
    <AuthorizeView>
      <NotAuthorized>
        <p>@Constants.NOT_AUTH_MESSAGE</p>
      </NotAuthorized>
      <Authorized>
        <h3>@(IsEditMode ? "Edit Article" : "Create New Article")</h3>
        @if (IsEditMode && string.IsNullOrEmpty(articleModel.Id))
        {
          <p>Loading...</p>
        }
        else
        {
          <!--Add/Edit Section: start-->
          <EditForm Model="articleModel" OnValidSubmit="HandleValidSubmit" Context="articleContext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Title -->
            <div class="mb-3">
              <label class="form-label">Title*</label>
              <InputText class="form-control" @bind-Value="articleModel.Title" />
              <ValidationMessage For="@(() => articleModel.Title)" />
            </div>

            <!-- Content -->
            <div class="mb-3">
              <label class="form-label">Content (HTML Markdown)*</label>
              <InputTextArea class="form-control" @bind-Value="articleModel.Content" rows="8" />
              <ValidationMessage For="@(() => articleModel.Content)" />
            </div>

            <!-- Image URL -->
            <div class="mb-3">
              <label class="form-label">Image URL*</label>
              <div class="input-group">
                <InputText class="form-control" @bind-Value="articleModel.ImageUrl" />
                <button type="button" class="btn btn-outline-secondary" @onclick="OpenGallery">Open Gallery</button>
              </div>
              <ValidationMessage For="@(() => articleModel.ImageUrl)" />
            </div>


            <!-- Image Alt Text -->
            <div class="mb-3">
              <label class="form-label">Image Alt Text</label>
              <InputText class="form-control" @bind-Value="articleModel.ImageAltText" />
            </div>

            <!-- Key -->
            <div class="mb-3">
              <label class="form-label">Key*</label>
              <InputText class="form-control" @bind-Value="articleModel.Key" @bind-Value:after="ValidateUniqueKey" />
              <ValidationMessage For="@(() => articleModel.Key)" />
              @if (isDuplicateKey)
              {
                <p><small class="text-danger">Key already exists. Please choose a different key.</small></p>
              }
            </div>

            <!-- Is Featured -->
            <div class="mb-3 form-check">
              <InputCheckbox class="form-check-input" @bind-Value="articleModel.IsFeatured" />
              <label class="form-check-label">Is Featured</label>
            </div>

            <!-- Tags -->
            <div class="mb-3">
              <label class="form-label">Tags (comma-separated)</label>
              <InputText class="form-control" @bind-Value="tagsInput" />
            </div>

            <!-- Meta Title -->
            <div class="mb-3">
              <label class="form-label">Meta Title</label>
              <InputText class="form-control" @bind-Value="articleModel.MetaTitle" />
            </div>

            <!-- Meta Description -->
            <div class="mb-3">
              <label class="form-label">Meta Description</label>
              <InputTextArea class="form-control" @bind-Value="articleModel.MetaDescription" rows="3" />
            </div>

            <!-- Meta Keywords -->
            <div class="mb-3">
              <label class="form-label">Meta Keywords (comma-separated)</label>
              <InputText class="form-control" @bind-Value="articleModel.MetaKeywords" />
            </div>

            <!-- Editor Selection Dropdown -->
            <div class="mb-3">
              <label class="form-label">Select Editor</label>
              <InputSelect class="form-select" @bind-Value="selectedEditorId" @bind-Value:after="OnEditorSelected">
                <option value="">-- Select an Editor --</option>
                @foreach (var editor in editors)
                {
                  <option value="@editor.Id">@editor.Name</option>
                }
              </InputSelect>
            </div>

            <!-- Display Selected Editor's Image -->
            @if (selectedEditorId != string.Empty)
            {
              var selectedEditor = editors.FirstOrDefault(e => e.Id == selectedEditorId);
              if (selectedEditor != null && !string.IsNullOrEmpty(selectedEditor.ImageUrl))
              {
                <div class="mb-3 text-center">
                  <img src="@selectedEditor.ImageUrl" alt="@selectedEditor.Name" class="img-thumbnail" style="max-width: 150px;" />
                </div>
              }
            }

            <!-- Editor Details -->
            <div class="mb-3">
              <label class="form-label">Editor Name*</label>
              <InputText class="form-control" @bind-Value="articleModel.EditorName" />
              <ValidationMessage For="@(() => articleModel.EditorName)" />
            </div>

            <div class="mb-3">
              <label class="form-label">Editor Email*</label>
              <InputText class="form-control" @bind-Value="articleModel.EditorEmail" />
              <ValidationMessage For="@(() => articleModel.EditorEmail)" />
            </div>

            <div class="mb-3">
              <label class="form-label">Editor Bio</label>
              <InputTextArea class="form-control" @bind-Value="articleModel.EditorBio" rows="3" />
            </div>

            <!-- Editor Image URL -->
            <div class="mb-3">
              <label class="form-label">Editor Image URL*</label>
              <div class="input-group">
                <InputText class="form-control" @bind-Value="articleModel.EditorImageUrl" />
                <button type="button" class="btn btn-outline-secondary" @onclick="OpenEditorImageGallery">Open Gallery</button>
              </div>
              <ValidationMessage For="@(() => articleModel.EditorImageUrl)" />
            </div>

            <div class="mb-3">
              <label class="form-label">Image Alt Text</label>
              <InputText class="form-control" @bind-Value="articleModel.EditorImageAltText" />
            </div>

            <!-- Submit and Cancel Buttons -->
            <div class="text-center">
              <button type="button" class="btn btn-secondary" @onclick="PreviewArticle">Preview</button>
              <button type="submit" class="btn btn-primary">@(IsEditMode ? "Update Article" : "Create Article")</button>
              @if (IsEditMode)
              {
                <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
              }
            </div>
          </EditForm>

          <!-- Submission Message -->
          @if (submissionMessage != null)
          {
            <div class="alert @submissionMessageClass mt-3" role="alert">
              @submissionMessage
            </div>
          }
          <!--Add/Edit Section: end-->
        }
      </Authorized>
    </AuthorizeView>
  </CascadingBlazoredModal>
}
else
{
  <p>Loading...</p>
}

@code {
  [Parameter]
  public string? ArticleId { get; set; }

  private ArticleViewModel articleModel = new();
  private string tagsInput = string.Empty;
  private bool IsEditMode => !string.IsNullOrEmpty(ArticleId);
  private string? submissionMessage = null;
  private string submissionMessageClass = "alert-success";
  private bool isDuplicateKey = false, isLoaded = false;
  private List<Editor> editors = new();
  private string selectedEditorId = string.Empty;
  private IModalService? modalService;

  private HttpClient HttpClient => HttpClientFactory.CreateClient(Constants.BASE_CLIENT);

  [Inject]
  private NavigationManager Navigation { get; set; } = default!;

  [CascadingParameter]
  private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

  public IModalService Modal => modalService ??= ServiceProvider.GetRequiredService<IModalService>();

  protected async override Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      isLoaded = true;
      var authState = await AuthenticationStateTask;
      var user = authState.User;

      if (user.Identity?.IsAuthenticated is true)
        editors = await HttpClient.GetFromJsonAsync<List<Editor>>("api/editors") ?? new List<Editor>();

      if (IsEditMode)
      {
        var article = await HttpClient.GetFromJsonAsync<Article>($"api/articles/{ArticleId}");
        if (article is not null)
        {
          articleModel = new ArticleViewModel
            {
              Id = article.Id,
              Title = article.Title,
              Content = article.ContentMarkdown,
              ImageUrl = article.ImageUrl,
              ImageAltText = article.ImageAltText,
              Key = article.Key,
              IsFeatured = article.IsFeatured,
              MetaTitle = article.MetaTitle,
              MetaDescription = article.MetaDescription,
              MetaKeywords = article.MetaKeywords,
              EditorName = article.Editor.Name,
              EditorEmail = article.Editor.Email,
              EditorBio = article.Editor.Bio,
              EditorId = article.Editor.Id,
              EditorImageAltText = article.Editor.ImageAltText,
              EditorImageUrl = article.Editor.ImageUrl
            };
          tagsInput = string.Join(", ", article.Tags);
          selectedEditorId = article.Editor.Id;
        }
        else
        {
          submissionMessage = "Article not found.";
          submissionMessageClass = "alert-danger";
        }
      }
      StateHasChanged();
    }
  }

  private void PreviewArticle()
  {
    var options = new ModalOptions()
      {
        Class = "bg-body modal-fullscreen modal-xl p-2",
        AnimationType = ModalAnimationType.PopIn,
        DisableBackgroundCancel = false,
        HideCloseButton = false,
        HideHeader = false,
        Size = ModalSize.ExtraLarge,
      };
    var modalParams = new ModalParameters();
    modalParams.Add(nameof(ArticleView.Article), GetArticle());
    modalParams.Add(nameof(ArticleView.ShowEditButton), false);
    Modal.Show<ArticleView>("Preview", modalParams, options);
  }

  private async Task HandleValidSubmit()
  {
    if (isDuplicateKey)
      return;

    // Split tags by comma and trim whitespace
    var tags = tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                        .Select(t => t.Trim().ToLower()).ToList();

    // Determine editor details
    string editorName;
    string editorEmail;
    string? editorBio;
    string? editorImageUrl;
    string? editorImageAltText;

    if (!string.IsNullOrEmpty(selectedEditorId))
    {
      var selectedEditor = editors.FirstOrDefault(e => e.Id == selectedEditorId);
      if (selectedEditor != null)
      {
        editorName = selectedEditor.Name;
        editorEmail = selectedEditor.Email;
        editorBio = selectedEditor.Bio;
        editorImageUrl = selectedEditor.ImageUrl;
        editorImageAltText = selectedEditor.ImageAltText;
      }
      else
      {
        submissionMessage = "Selected editor not found.";
        submissionMessageClass = "alert-danger";
        return;
      }
    }
    else
    {
      // Ensure manual editor details are provided
      if (string.IsNullOrEmpty(articleModel.EditorName) || string.IsNullOrEmpty(articleModel.EditorEmail))
      {
        submissionMessage = "Editor Name and Email are required.";
        submissionMessageClass = "alert-danger";
        return;
      }

      editorName = articleModel.EditorName;
      editorEmail = articleModel.EditorEmail;
      editorBio = articleModel.EditorBio;
      editorImageUrl = articleModel.EditorImageUrl;
      editorImageAltText = articleModel.EditorImageAltText;
    }

    var article = GetArticle();

    var response = await HttpClient.PostAsJsonAsync("api/articles", article);

    if (response.IsSuccessStatusCode)
    {
      submissionMessage = IsEditMode ? "Article updated successfully!" : "Article created successfully!";
      submissionMessageClass = "alert-success";
      await Task.Delay(2000);
      Navigation.NavigateTo("/articles");
    }
    else
    {
      submissionMessage = "An error occurred while submitting the article.";
      submissionMessageClass = "alert-danger";
    }
  }

  private void CancelEdit()
  {
    Navigation.NavigateTo("/articles");
  }

  private void OnEditorSelected()
  {
    if (!string.IsNullOrEmpty(selectedEditorId))
    {
      var selectedEditor = editors.FirstOrDefault(ed => ed.Id == selectedEditorId);
      if (selectedEditor != null)
      {
        articleModel.EditorName = selectedEditor.Name;
        articleModel.EditorEmail = selectedEditor.Email;
        articleModel.EditorBio = selectedEditor.Bio;
        articleModel.EditorImageUrl = selectedEditor.ImageUrl;
        articleModel.EditorImageAltText = selectedEditor.ImageAltText;
        articleModel.EditorId = selectedEditor.Id;
      }
    }
    else
    {
      articleModel.EditorName = string.Empty;
      articleModel.EditorEmail = string.Empty;
      articleModel.EditorId = string.Empty;
      articleModel.EditorBio = string.Empty;
      articleModel.EditorImageUrl = string.Empty;
      articleModel.EditorImageAltText = string.Empty;
    }
  }

  private async void ValidateUniqueKey()
  {
    var isUnique = ArticleId is null ? await HttpClient.GetFromJsonAsync<bool>($"api/validate-unique-key/{articleModel.Key}")
                                     : await HttpClient.GetFromJsonAsync<bool>($"api/validate-unique-key/{articleModel.Key}?articleId={ArticleId}");
    isDuplicateKey = !isUnique;
    StateHasChanged();
  }

  private async void OpenGallery()
  {
    var result = await ShowImageGallery();
    if (result.Confirmed)
    {
      articleModel.ImageUrl = result.Data?.ToString()!;
      StateHasChanged();
    }
  }

  private async void OpenEditorImageGallery()
  {
    var result = await ShowImageGallery();
    if (result.Confirmed)
    {
      articleModel.EditorImageUrl = result.Data?.ToString()!;
      StateHasChanged();
    }
  }

  private async Task<ModalResult> ShowImageGallery()
  {
    var options = new ModalOptions()
      {
        Class = "bg-body modal-fullscreen p-2",
        AnimationType = ModalAnimationType.FadeInOut,
        DisableBackgroundCancel = true,
        HideCloseButton = false,
        HideHeader = false,
        Size = ModalSize.Large,
        Position = ModalPosition.Middle
      };
    var modalParams = new ModalParameters();
    var modal = Modal.Show<ImageGallery>("Select Image", modalParams, options);
    return await modal.Result;
  }

  private Article GetArticle()
  {
    return new Article
      {
        Id = articleModel.Id!,
        Title = articleModel.Title.ToTitleCase(),
        ContentMarkdown = articleModel.Content,
        ImageUrl = articleModel.ImageUrl,
        ImageAltText = articleModel.ImageAltText,
        Key = articleModel.Key.ToSlug(),
        IsFeatured = articleModel.IsFeatured,
        Tags = GetTags(),
        MetaTitle = articleModel.MetaTitle?.ToTitleCase(),
        MetaDescription = articleModel.MetaDescription,
        MetaKeywords = articleModel.MetaKeywords,
        Editor = new Editor
        {
          Id = selectedEditorId,
          Name = articleModel.EditorName,
          Email = articleModel.EditorEmail,
          Bio = articleModel.EditorBio,
          ImageUrl = articleModel.EditorImageUrl,
          ImageAltText = articleModel.ImageAltText
        }
      };
  }
  private List<string> GetTags() => tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(t => t.Trim().ToLower()).ToList();
}
